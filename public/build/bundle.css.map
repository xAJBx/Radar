{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "login.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { Router, Link, Route } from \"svelte-routing\";\n  import login from \"./routes/login.svelte\";\n  import Home from \"./routes/Home.svelte\";\n\n  export let url = \"\";\n</script>\n\n<style>\n  nav {\n    background-color: #696868;\n    color: #ddd;\n    text-align: center;\n  }\n  li:hover {\n    background-color: #ddd;\n  }\n  nav li {\n    display: inline;\n    display: inline-block;\n    padding: 10px;\n  }\n</style>\n\n<Router {url}>\n  <nav>\n    <ul>\n      |\n      <!-- svelte-ignore a11y-missing-attribute -->\n      <li>\n        <Link to=\"/\">Home</Link>\n      </li>\n      |\n      <!-- svelte-ignore a11y-missing-attribute -->\n      <li>\n        <Link to=\"login\">Login</Link>\n      </li>\n      |\n    </ul>\n  </nav>\n  <div> \n    <Route path=\"login\" component={login} />\n    <Route path=\"/\">\n      <Home />\n    </Route>\n  </div>\n</Router>\n",
    "<script>\n  import { navigate } from \"svelte-routing\";\n  let password = \"\";\n  let username = \"\";\n  let result = null;\n  let user = null;\n  let profile = null;\n  let login_visi = true;\n  let sign_up = false;\n  let reg_email = \"\";\n  let reg_passwrd = \"\";\n  let reg_passwrd_confirm = \"\";\n  let reg_username = \"\";\n  let reg_company = \"\";\n\n  //@desc:  hits Harbor to validate credintials.  with valid credintials sends token to get user. with user gets profile\n  function login(username, password) {\n    // get auth token\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    var raw = JSON.stringify({ email: `${username}`, password: `${password}` });\n\n    var requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: raw,\n      redirect: \"follow\",\n    };\n\n    fetch(\n      \"https://cors-anywhere.herokuapp.com/\" +\n        \"http://bridgesautomation.duckdns.org:5778/auth\",\n      requestOptions\n    )\n      .then((response) => response.json())\n      .then((res) => {\n        result = res;\n\n        //send token auth token to get profile\n        var myHeaders = new Headers();\n        myHeaders.append(\"x-auth-token\", `${result.token}`);\n\n        var requestOptions = {\n          method: \"GET\",\n          headers: myHeaders,\n          redirect: \"follow\",\n        };\n\n        fetch(\n          \"https://cors-anywhere.herokuapp.com/\" +\n            \"bridgesautomation.duckdns.org:5778/profile/me\",\n          requestOptions\n        )\n          .then((response) => response.json())\n          .then((result) => (profile = result))\n          .catch((error) => console.log(\"error\", error));\n\n        //send token auth token to get user\n        var myHeaders = new Headers();\n        myHeaders.append(\"x-auth-token\", `${result.token}`);\n\n        var requestOptions = {\n          method: \"GET\",\n          headers: myHeaders,\n          redirect: \"follow\",\n        };\n\n        fetch(\n          \"https://cors-anywhere.herokuapp.com/\" +\n            \"http://bridgesautomation.duckdns.org:5778/auth\",\n          requestOptions\n        )\n          .then((response) => response.json())\n          .then((result) => {\n            user = result;\n\n            //navigate to users homepage\n            //if(user) navigate(\"/Home\", {replace: true});\n            // Transition to homepage\n            login_visi = false;\n          })\n          .catch((error) => console.log(\"error\", error));\n      })\n      .catch((error) => console.log(\"error\", error));\n  }\n\n  // navigate to the signup markup\n  const signup = () => {\n    sign_up = true;\n  };\n\n  // Profile Create\n  const profile_create = (token, company) => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"x-auth-token\", token);\n\n    var raw = JSON.stringify({ company });\n\n    var requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: raw,\n      redirect: \"follow\",\n    };\n\n    fetch(\n      \"https://cors-anywhere.herokuapp.com/\" +\n        \"http://bridgesautomation.duckdns.org:5778/profile\",\n      requestOptions\n    )\n      .then((response) => response.json())\n      .then((result) => {\n        console.log(JSON.stringify(result));\n        sign_up = false;\n        login(reg_email, reg_passwrd);\n      })\n      .catch((error) => console.log(\"error\", error));\n  };\n\n  // register\n  const register = (\n    reg_username,\n    reg_email,\n    reg_passwrd,\n    reg_passwrd_confirm\n  ) => {\n    if (reg_passwrd != reg_passwrd_confirm) {\n      return { msg: \"Passwords did not match\" };\n    }\n\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    var raw = JSON.stringify({\n      name: reg_username,\n      email: reg_email,\n      password: reg_passwrd,\n    });\n\n    var requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: raw,\n      redirect: \"follow\",\n    };\n\n    fetch(\n      \"https://cors-anywhere.herokuapp.com/\" +\n        \"http://bridgesautomation.duckdns.org:5778/users\",\n      requestOptions\n    )\n      .then((response) => response.json())\n      .then((result) => {\n        console.log(JSON.stringify(result));\n        profile_create(result.token, reg_company);\n      })\n      .catch((error) => console.log(\"error\", error));\n  };\n\n  const API_Key_Gen = (token) => {\n\tvar myHeaders = new Headers();\n    myHeaders.append(\"Conte\", \"application/json\");\n    myHeaders.append(\"x-auth-token\", token);\n\n    var requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      redirect: \"follow\",\n    };\n\n    fetch(\n      \"https://cors-anywhere.herokuapp.com/\" +\n        \"http://bridgesautomation.duckdns.org:5778/profile/settings/genKey\",\n      requestOptions\n    )\n      .then((response) => response.json())\n      .then((result) => {\n\t\t  alert(JSON.stringify(result))\n\t\t})\n      .catch((error) => console.log(\"error\", error));\n  };\n</script>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n  section {\n    background-color: lightgray;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n\n  p {\n    font-size: x-small;\n  }\n</style>\n\n{#if login_visi && !sign_up}\n  <section>\n    <main>\n      <h1><img src=\"/img/MyOPC_200x200.png\" alt=\"MyOPC\" /></h1>\n\n      <form on:submit|preventDefault={login(username, password)}>\n        <label> Username <input required bind:value={username} /> </label>\n        <label>\n          Password\n          <input type=\"password\" required bind:value={password} />\n        </label>\n        <div class=\"buttons\">\n          <button>Login</button>\n          <button type=\"button\" on:click={signup}>Sign Up</button>\n        </div>\n        <p>\n          Powered by\n          <img\n            src=\"/img/small_BA_logo_75x75_Cropped.png\"\n            alt=\"BRIDGES AUTOMATION\" />\n        </p>\n      </form>\n    </main>\n  </section>\n{:else if sign_up}\n  <section>\n    <main>\n      <h1><img src=\"/img/MyOPC_200x200.png\" alt=\"MyOPC\" /></h1>\n\n      <form\n        on:submit|preventDefault={register(reg_username, reg_email, reg_passwrd, reg_passwrd_confirm)}>\n        <label> Username <input required bind:value={reg_username} /> </label>\n        <label> Email <input required bind:value={reg_email} /> </label>\n        <label> Company <input required bind:value={reg_company} /> </label>\n        <label>\n          Password\n          <input type=\"password\" required bind:value={reg_passwrd} />\n        </label>\n        <label>\n          Confirm\n          <input type=\"password\" required bind:value={reg_passwrd_confirm} />\n        </label>\n        <div class=\"buttons\"><button>Login</button></div>\n        <p>\n          Powered by\n          <img\n            src=\"/img/small_BA_logo_75x75_Cropped.png\"\n            alt=\"BRIDGES AUTOMATION\" />\n        </p>\n      </form>\n    </main>\n  </section>\n{:else}\n  <section>\n    <h1>{JSON.stringify(user)}</h1>\n    <p>{JSON.stringify(profile)}</p>\n\n    \n    <button type=\"button\" on:click={API_Key_Gen(result.token)}>API Key Generator</button>\n  </section>\n{/if}\n"
  ],
  "names": [],
  "mappings": "AASE,GAAG,4BAAC,CAAC,AACH,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,8BAAE,MAAM,AAAC,CAAC,AACR,gBAAgB,CAAE,IAAI,AACxB,CAAC,AACD,iBAAG,CAAC,EAAE,cAAC,CAAC,AACN,OAAO,CAAE,MAAM,CACf,OAAO,CAAE,YAAY,CACrB,OAAO,CAAE,IAAI,AACf,CAAC;ACqKD,IAAI,eAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AACD,OAAO,eAAC,CAAC,AACP,gBAAgB,CAAE,SAAS,AAC7B,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,eAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC,AAED,CAAC,eAAC,CAAC,AACD,SAAS,CAAE,OAAO,AACpB,CAAC"
}