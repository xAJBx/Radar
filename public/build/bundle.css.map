{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "login.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { Router, Link, Route } from \"svelte-routing\";\n  import login from \"./routes/login.svelte\";\n  import Home from \"./routes/Home.svelte\";\n\n  export let url = \"\";\n</script>\n\n<style>\n  nav {\n    background-color: #696868;\n    color: #ddd;\n    text-align: center;\n  }\n  li:hover {\n    background-color: #ddd;\n  }\n  nav li {\n    display: inline;\n    display: inline-block;\n    padding: 10px;\n  }\n</style>\n\n<Router {url}>\n  {#if 1 === 0}\n    <nav>\n      <ul>\n        |\n        <!-- svelte-ignore a11y-missing-attribute -->\n        <li>\n          <Link to=\"/\">Login</Link>\n        </li>\n        |\n        <!-- svelte-ignore a11y-missing-attribute -->\n        <li>\n          <Link to=\"login\">Login</Link>\n        </li>\n        |\n      </ul>\n    </nav>\n  {/if}\n  <div>\n    <Route path=\"/\" component={login} />\n    <Route path=\"/\">\n      <Home />\n    </Route>\n  </div>\n</Router>\n",
    "<script>\n  let password = \"\";\n  let username = \"\";\n  let result = null;\n  let user = null;\n  let profile = { company: \"Loading\" };\n  let login_visi = true;\n  let sign_up = false;\n  let reg_email = \"\";\n  let reg_passwrd = \"\";\n  let reg_passwrd_confirm = \"\";\n  let reg_username = \"\";\n  let reg_company = \"\";\n  let instrument = \"\";\n  let instruments = [];\n  let instrument_value = [];\n  let instvals = [];\n  let instrument_display = [];\n  let settings_page = false;\n  let instruments_page = false;\n  let collections_page = false;\n  let collection_details = true;\n  let addNewCollectionForm = false;\n  let trendData = [];\n  let datas = {};\n  let collection_name;\n  let collection_owner;\n  let collection_users;\n  let collection_instruments;\n  let collection_instrument_data;\n\n  //demo chart\n  import Chart from \"svelte-frappe-charts\";\n  import { object_without_properties } from \"svelte/internal\";\n\n  let data = {\n    labels: [\"a\"],\n    datasets: [\n      {\n        values: [1],\n      },\n    ],\n  };\n  // end demo chart\n\n  ///gravatar\n  function get_gravatar(email, size) {\n    // MD5 (Message-Digest Algorithm) by WebToolkit\n    //\n\n    var MD5 = function (s) {\n      function L(k, d) {\n        return (k << d) | (k >>> (32 - d));\n      }\n      function K(G, k) {\n        var I, d, F, H, x;\n        F = G & 2147483648;\n        H = k & 2147483648;\n        I = G & 1073741824;\n        d = k & 1073741824;\n        x = (G & 1073741823) + (k & 1073741823);\n        if (I & d) {\n          return x ^ 2147483648 ^ F ^ H;\n        }\n        if (I | d) {\n          if (x & 1073741824) {\n            return x ^ 3221225472 ^ F ^ H;\n          } else {\n            return x ^ 1073741824 ^ F ^ H;\n          }\n        } else {\n          return x ^ F ^ H;\n        }\n      }\n      function r(d, F, k) {\n        return (d & F) | (~d & k);\n      }\n      function q(d, F, k) {\n        return (d & k) | (F & ~k);\n      }\n      function p(d, F, k) {\n        return d ^ F ^ k;\n      }\n      function n(d, F, k) {\n        return F ^ (d | ~k);\n      }\n      function u(G, F, aa, Z, k, H, I) {\n        G = K(G, K(K(r(F, aa, Z), k), I));\n        return K(L(G, H), F);\n      }\n      function f(G, F, aa, Z, k, H, I) {\n        G = K(G, K(K(q(F, aa, Z), k), I));\n        return K(L(G, H), F);\n      }\n      function D(G, F, aa, Z, k, H, I) {\n        G = K(G, K(K(p(F, aa, Z), k), I));\n        return K(L(G, H), F);\n      }\n      function t(G, F, aa, Z, k, H, I) {\n        G = K(G, K(K(n(F, aa, Z), k), I));\n        return K(L(G, H), F);\n      }\n      function e(G) {\n        var Z;\n        var F = G.length;\n        var x = F + 8;\n        var k = (x - (x % 64)) / 64;\n        var I = (k + 1) * 16;\n        var aa = Array(I - 1);\n        var d = 0;\n        var H = 0;\n        while (H < F) {\n          Z = (H - (H % 4)) / 4;\n          d = (H % 4) * 8;\n          aa[Z] = aa[Z] | (G.charCodeAt(H) << d);\n          H++;\n        }\n        Z = (H - (H % 4)) / 4;\n        d = (H % 4) * 8;\n        aa[Z] = aa[Z] | (128 << d);\n        aa[I - 2] = F << 3;\n        aa[I - 1] = F >>> 29;\n        return aa;\n      }\n      function B(x) {\n        var k = \"\",\n          F = \"\",\n          G,\n          d;\n        for (d = 0; d <= 3; d++) {\n          G = (x >>> (d * 8)) & 255;\n          F = \"0\" + G.toString(16);\n          k = k + F.substr(F.length - 2, 2);\n        }\n        return k;\n      }\n      function J(k) {\n        k = k.replace(/rn/g, \"n\");\n        var d = \"\";\n        for (var F = 0; F < k.length; F++) {\n          var x = k.charCodeAt(F);\n          if (x < 128) {\n            d += String.fromCharCode(x);\n          } else {\n            if (x > 127 && x < 2048) {\n              d += String.fromCharCode((x >> 6) | 192);\n              d += String.fromCharCode((x & 63) | 128);\n            } else {\n              d += String.fromCharCode((x >> 12) | 224);\n              d += String.fromCharCode(((x >> 6) & 63) | 128);\n              d += String.fromCharCode((x & 63) | 128);\n            }\n          }\n        }\n        return d;\n      }\n      var C = Array();\n      var P, h, E, v, g, Y, X, W, V;\n      var S = 7,\n        Q = 12,\n        N = 17,\n        M = 22;\n      var A = 5,\n        z = 9,\n        y = 14,\n        w = 20;\n      var o = 4,\n        m = 11,\n        l = 16,\n        j = 23;\n      var U = 6,\n        T = 10,\n        R = 15,\n        O = 21;\n      s = J(s);\n      C = e(s);\n      Y = 1732584193;\n      X = 4023233417;\n      W = 2562383102;\n      V = 271733878;\n      for (P = 0; P < C.length; P += 16) {\n        h = Y;\n        E = X;\n        v = W;\n        g = V;\n        Y = u(Y, X, W, V, C[P + 0], S, 3614090360);\n        V = u(V, Y, X, W, C[P + 1], Q, 3905402710);\n        W = u(W, V, Y, X, C[P + 2], N, 606105819);\n        X = u(X, W, V, Y, C[P + 3], M, 3250441966);\n        Y = u(Y, X, W, V, C[P + 4], S, 4118548399);\n        V = u(V, Y, X, W, C[P + 5], Q, 1200080426);\n        W = u(W, V, Y, X, C[P + 6], N, 2821735955);\n        X = u(X, W, V, Y, C[P + 7], M, 4249261313);\n        Y = u(Y, X, W, V, C[P + 8], S, 1770035416);\n        V = u(V, Y, X, W, C[P + 9], Q, 2336552879);\n        W = u(W, V, Y, X, C[P + 10], N, 4294925233);\n        X = u(X, W, V, Y, C[P + 11], M, 2304563134);\n        Y = u(Y, X, W, V, C[P + 12], S, 1804603682);\n        V = u(V, Y, X, W, C[P + 13], Q, 4254626195);\n        W = u(W, V, Y, X, C[P + 14], N, 2792965006);\n        X = u(X, W, V, Y, C[P + 15], M, 1236535329);\n        Y = f(Y, X, W, V, C[P + 1], A, 4129170786);\n        V = f(V, Y, X, W, C[P + 6], z, 3225465664);\n        W = f(W, V, Y, X, C[P + 11], y, 643717713);\n        X = f(X, W, V, Y, C[P + 0], w, 3921069994);\n        Y = f(Y, X, W, V, C[P + 5], A, 3593408605);\n        V = f(V, Y, X, W, C[P + 10], z, 38016083);\n        W = f(W, V, Y, X, C[P + 15], y, 3634488961);\n        X = f(X, W, V, Y, C[P + 4], w, 3889429448);\n        Y = f(Y, X, W, V, C[P + 9], A, 568446438);\n        V = f(V, Y, X, W, C[P + 14], z, 3275163606);\n        W = f(W, V, Y, X, C[P + 3], y, 4107603335);\n        X = f(X, W, V, Y, C[P + 8], w, 1163531501);\n        Y = f(Y, X, W, V, C[P + 13], A, 2850285829);\n        V = f(V, Y, X, W, C[P + 2], z, 4243563512);\n        W = f(W, V, Y, X, C[P + 7], y, 1735328473);\n        X = f(X, W, V, Y, C[P + 12], w, 2368359562);\n        Y = D(Y, X, W, V, C[P + 5], o, 4294588738);\n        V = D(V, Y, X, W, C[P + 8], m, 2272392833);\n        W = D(W, V, Y, X, C[P + 11], l, 1839030562);\n        X = D(X, W, V, Y, C[P + 14], j, 4259657740);\n        Y = D(Y, X, W, V, C[P + 1], o, 2763975236);\n        V = D(V, Y, X, W, C[P + 4], m, 1272893353);\n        W = D(W, V, Y, X, C[P + 7], l, 4139469664);\n        X = D(X, W, V, Y, C[P + 10], j, 3200236656);\n        Y = D(Y, X, W, V, C[P + 13], o, 681279174);\n        V = D(V, Y, X, W, C[P + 0], m, 3936430074);\n        W = D(W, V, Y, X, C[P + 3], l, 3572445317);\n        X = D(X, W, V, Y, C[P + 6], j, 76029189);\n        Y = D(Y, X, W, V, C[P + 9], o, 3654602809);\n        V = D(V, Y, X, W, C[P + 12], m, 3873151461);\n        W = D(W, V, Y, X, C[P + 15], l, 530742520);\n        X = D(X, W, V, Y, C[P + 2], j, 3299628645);\n        Y = t(Y, X, W, V, C[P + 0], U, 4096336452);\n        V = t(V, Y, X, W, C[P + 7], T, 1126891415);\n        W = t(W, V, Y, X, C[P + 14], R, 2878612391);\n        X = t(X, W, V, Y, C[P + 5], O, 4237533241);\n        Y = t(Y, X, W, V, C[P + 12], U, 1700485571);\n        V = t(V, Y, X, W, C[P + 3], T, 2399980690);\n        W = t(W, V, Y, X, C[P + 10], R, 4293915773);\n        X = t(X, W, V, Y, C[P + 1], O, 2240044497);\n        Y = t(Y, X, W, V, C[P + 8], U, 1873313359);\n        V = t(V, Y, X, W, C[P + 15], T, 4264355552);\n        W = t(W, V, Y, X, C[P + 6], R, 2734768916);\n        X = t(X, W, V, Y, C[P + 13], O, 1309151649);\n        Y = t(Y, X, W, V, C[P + 4], U, 4149444226);\n        V = t(V, Y, X, W, C[P + 11], T, 3174756917);\n        W = t(W, V, Y, X, C[P + 2], R, 718787259);\n        X = t(X, W, V, Y, C[P + 9], O, 3951481745);\n        Y = K(Y, h);\n        X = K(X, E);\n        W = K(W, v);\n        V = K(V, g);\n      }\n      var i = B(Y) + B(X) + B(W) + B(V);\n      return i.toLowerCase();\n    };\n\n    var size = size || 80;\n\n    return \"http://www.gravatar.com/avatar/\" + MD5(email) + \".jpg?s=\" + size;\n  }\n\n  ///end gravatar\n\n  //@desc:  hits Harbor to validate credintials.  with valid credintials sends token to get user. with user gets profile\n  function login(username, password) {\n    // get auth token\n\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    var raw = JSON.stringify({ email: `${username}`, password: `${password}` });\n\n    var requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: raw,\n      redirect: \"follow\",\n    };\n\n    fetch(\n      //\"https://cors-anywhere.herokuapp.com/\" +\n      \"http://bridgesautomation.duckdns.org:5778/auth\",\n      requestOptions\n    )\n      .then((response) => response.json())\n      .then((res) => {\n        result = res;\n\n        //send token auth token to get profile\n        var myHeaders = new Headers();\n        myHeaders.append(\"x-auth-token\", `${result.token}`);\n\n        var requestOptions = {\n          method: \"GET\",\n          headers: myHeaders,\n          redirect: \"follow\",\n        };\n\n        fetch(\n          //\"https://cors-anywhere.herokuapp.com/\" +\n          \"http://bridgesautomation.duckdns.org:5778/profile/me\",\n          requestOptions\n        )\n          .then((response) => response.json())\n          .then((result) => {\n            profile = result;\n            instruments = get_All_instrumentdata(profile);\n          })\n          .catch((error) => console.log(\"error\", error));\n\n        //send token auth token to get user\n        var myHeaders = new Headers();\n        myHeaders.append(\"x-auth-token\", `${result.token}`);\n\n        var requestOptions = {\n          method: \"GET\",\n          headers: myHeaders,\n          redirect: \"follow\",\n        };\n\n        fetch(\n          //\"https://cors-anywhere.herokuapp.com/\" +\n          \"http://bridgesautomation.duckdns.org:5778/auth\",\n          requestOptions\n        )\n          .then((response) => response.json())\n          .then((result) => {\n            user = result;\n\n            //navigate to users homepage\n            //if(user) navigate(\"/Home\", {replace: true});\n            // Transition to homepage\n            login_visi = false;\n          })\n          .catch((error) => console.log(\"error\", error));\n      })\n      .catch((error) => console.log(\"error\", error));\n  }\n\n  // navigate to the signup markup\n  const signup = () => {\n    sign_up = !sign_up;\n  };\n\n  // Profile Create\n  const profile_create = (token, company) => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"x-auth-token\", token);\n\n    var raw = JSON.stringify({ company });\n\n    var requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: raw,\n      redirect: \"follow\",\n    };\n\n    fetch(\n      //\"https://cors-anywhere.herokuapp.com/\" +\n      \"http://bridgesautomation.duckdns.org:5778/profile\",\n      requestOptions\n    )\n      .then((response) => response.json())\n      .then((result) => {\n        //console.log(JSON.stringify(result));\n        sign_up = false;\n        login(reg_email, reg_passwrd);\n      })\n      .catch((error) => console.log(\"error\", error));\n  };\n\n  function formatDate(date) {\n    var d = new Date(date),\n      month = \"\" + (d.getMonth() + 1),\n      day = \"\" + d.getDate(),\n      year = d.getFullYear(),\n      hour = d.getHours(),\n      min = d.getMinutes(),\n      sec = d.getSeconds();\n\n    if (month.length < 2) month = \"0\" + month;\n    if (day.length < 2) day = \"0\" + day;\n    if (hour.length < 2) hour = \"0\" + hour;\n    if (min.length < 2) min = \"0\" + min;\n    if (sec.length < 2) sec = \"0\" + sec;\n\n    return [year, month, day].join(\"-\") + \" \" + [hour, min, sec].join(\":\");\n  }\n\n  // create collection\n  // sp requires \n  // 1. string of instruments delimited with \",\"\n  // 2. collection name \n  // 3. collection owner id form mongoDB\n  const collection = async (\n    collection_name,\n    collection_instruments,\n    collection_users\n  ) => {\n    if (!collection_name && !collection_instruments && !collection_users) {\n      return { msg: \"Entire form needs filled out\" };\n    }\n    collection_owner = username;\n\n\n      var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"x-auth-token\", result.token);\n\n    var raw = `{ \n      \n    \"collection_owner\": \"${collection_owner}\",\n    \"collection_name\": \"${collection_name}\",\n    \"collection_users\": \"${collection_users}\",\n    \"collection_instruments\": \"${collection_instruments}\"\n\n\n     }`;\n     console.log(raw)\n    var requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: raw,\n      redirect: \"follow\",\n    };\n\n    fetch(\n      //\"https://cors-anywhere.herokuapp.com/\" +\n      \"http://bridgesautomation.duckdns.org:5778/profile\",\n      //\"http://10.20.30.134:50091/profile/createCollection\",\n      requestOptions\n    )\n\n\n    \n    console.log(username);\n  };\n\n  // register\n  const register = (\n    reg_username,\n    reg_email,\n    reg_passwrd,\n    reg_passwrd_confirm\n  ) => {\n    if (reg_passwrd != reg_passwrd_confirm) {\n      return { msg: \"Passwords did not match\" };\n    }\n\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    var raw = JSON.stringify({\n      name: reg_username,\n      email: reg_email,\n      password: reg_passwrd,\n    });\n\n    var requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: raw,\n      redirect: \"follow\",\n    };\n\n    fetch(\n      //\"https://cors-anywhere.herokuapp.com/\" +\n      \"http://bridgesautomation.duckdns.org:5778/users\",\n      requestOptions\n    )\n      .then((response) => response.json())\n      .then((result) => {\n        //console.log(JSON.stringify(result));\n        profile_create(result.token, reg_company);\n      })\n      .catch((error) => console.log(\"error\", error));\n  };\n\n  // api key creation\n  const API_Key_Gen = (token) => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"x-auth-token\", token);\n\n    var requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      redirect: \"follow\",\n    };\n\n    fetch(\n      //\"https://cors-anywhere.herokuapp.com/\" +\n      \"http://bridgesautomation.duckdns.org:5778/profile/settings/genKey\",\n      requestOptions\n    )\n      .then((response) => response.json())\n      .then((result) => {\n        alert(JSON.stringify(result));\n      })\n      .catch((error) => console.log(\"error\", error));\n  };\n\n\n  // collection\n  //setInterval(() => {}, 5000);\n  async function getCollectionInstrumentCurrentValue(owner, unit_id_c, collect_name){\n    \n    try{\n    var myHeaders = new Headers();\n        myHeaders.append(\"Content-Type\", \"application/json\");\n        myHeaders.append(\"x-auth-token\", result.token);\n\n        var requestOptions = {\n          method: \"GET\",\n          headers: myHeaders,\n          redirect: \"follow\",\n        };\n\n        let datadata = await\n        fetch(\n          //\"https://cors-anywhere.herokuapp.com/\" +\n          //`http://10.20.30.134:50091/data/latestRecord/${owner}/${unit_id_c}/${collect_name}`,\n          `http://bridgesautomation.duckdns.org:5778/data/latestRecord/${owner}/${unit_id_c}/${collect_name}`,\n          requestOptions\n        )\n\n        let datadatajson = await datadata.json()\n        console.log(datadatajson)\n        return datadatajson[1][0].sensor_reading\n\n      }catch(err){\n        console.log(err)\n      }\n\n}\n\n  // HERE ... need to get values updated on page\n  setInterval(() => {\n    try {\n      function get_range_data(unit_id_d, start_time, end_time) {\n        \n        \n        var myHeaders = new Headers();\n        myHeaders.append(\"Content-Type\", \"application/json\");\n        myHeaders.append(\"x-auth-token\", result.token);\n\n        var requestOptions = {\n          method: \"GET\",\n          headers: myHeaders,\n          redirect: \"follow\",\n        };\n\n        //working need to loop an pass unit_id\n        fetch(\n          //\"https://cors-anywhere.herokuapp.com/\" +\n          //`http://bridgesautomation.duckdns.org:5778/data/rangeRecords/${unit_id_d}/${start_time}/${end_time}`,\n          `http://bridgesautomation.duckdns.org:5778/data/rangeRecords/Data_${unit_id_d}/${start_time}/${end_time}`,\n          requestOptions\n        )\n          .then((response) => response.json())\n          .then((result) => {\n            try {\n              //console.log(result);\n              if (result) {\n                const du = instruments.includes(result[2][0].unit_id.trim());\n                if (du) {\n                  //console.log(result);\n                  let flag = false;\n                  //console.log(result[2].length);\n\n                  //load trend displays\n                  let flaggy = false;\n                  let j = 0;\n                  while (j < trendData.length && flaggy === false) {\n                    //console.log(\n                     // trendData[j][0].trim() === result[2][0].unit_id.trim()\n                    //);\n                    //console.log(\n                    //  trendData[j][0].trim(),\n                    //  \" = \",\n                    //  result[2][0].unit_id.trim()\n                    //);\n                    if (\n                      trendData[j][0].trim() === result[2][0].unit_id.trim()\n                    ) {\n                      flaggy = true;\n                    }\n                    j++;\n                  }\n                  if (!flaggy) {\n                    let trendObj = [\n                      result[2][0].unit_id,\n                      {\n                        labels: [],\n                        datasets: [\n                          {\n                            values: [],\n                          },\n                        ],\n                      },\n                    ];\n                    for (let i = 0; i < result[2].length; i++) {\n                      trendObj[1].datasets[0].values.push(\n                        result[2][i].sensor_reading\n                      );\n                      trendObj[1].labels.push(result[2][i].time_stamp);\n                    }\n\n                    trendData.unshift(trendObj);\n                  }\n                  flaggy = false;\n                  //console.log(trendData);\n                } else {\n                  console.log(\"else\");\n                }\n              }\n            } catch (error) {\n              console.log(error);\n            }\n          })\n          .catch((error) => console.log(\"error:\", error));\n      }\n\n      function get_data(unit_id_d) {\n        var myHeaders = new Headers();\n        myHeaders.append(\"Content-Type\", \"application/json\");\n        myHeaders.append(\"x-auth-token\", result.token);\n\n        var requestOptions = {\n          method: \"GET\",\n          headers: myHeaders,\n          redirect: \"follow\",\n        };\n\n        //working need to loop an pass unit_id\n        fetch(\n          //\"https://cors-anywhere.herokuapp.com/\" +\n          `http://bridgesautomation.duckdns.org:5778/data/latestRecord/${unit_id_d}`,\n          requestOptions\n        )\n          .then((response) => response.json())\n          .then((result) => {\n            instrument = result;\n\n            const fu = instruments.includes(instrument[2][0].unit_id.trim());\n\n            if (fu) {\n              let flag = false;\n              for (let i = 0; i < instrument_display.length; i++) {\n                if (\n                  instrument_display[i].unit_id.trim() ===\n                  instrument[2][0].unit_id.trim()\n                ) {\n                  instrument_display[i] = instrument[2][0];\n                  flag = true;\n                }\n              }\n\n              if (!flag) {\n                instrument_display.unshift(instrument[2][0]);\n                flag = false;\n              }\n            } else {\n            }\n          })\n          .catch((error) => console.log(\"error\", error));\n      }\n      //hereeeee\n      for (let i = 0; i < profile.instruments.length; i++) {\n        get_data(\" \" + profile.instruments[i]);\n        let now = new Date();\n\n        let weekRange = new Date();\n        weekRange.setDate(weekRange.getDate() - 0.001);\n        //console.log(formatDate(now));\n        get_range_data(\n          profile.instruments[i],\n          formatDate(weekRange),\n          formatDate(now)\n        );\n      }\n    } catch (err) {\n      console.error(err.message);\n    }\n  }, 5000);\n\n  const goToSettings = () => (settings_page = !settings_page);\n  const goToInstruments = () => (instruments_page = !instruments_page);\n  const goToCollections = () => (collections_page = !collections_page);\n  const showCollectionDetails = () =>\n    (collection_details = !collection_details);\n  const addNewCollectionButton = () =>\n    (addNewCollectionForm = !addNewCollectionForm);\n  const get_All_instrumentdata = (profile) => {\n    return profile.instruments;\n  };\n</script>\n\n<style>\n  #dropdown {\n    padding: 5px;\n    cursor: pointer;\n    font-size: 15px;\n    border: 1px solid rgb(169, 169, 169);\n    -moz-appearance: none;\n    -moz-box-shadow: 0 3px 0 #ccc, 0 -1px #2961c1 inset;\n    box-shadow: 0 3px 0 #ccc, 0 -1px purple inset;\n  }\n\n  #tiptop {\n    font-size: 24px;\n    color: white;\n    background-color: navy;\n    padding: 1%;\n    align-content: center;\n  }\n  li:hover {\n    background-color: lightslategrey;\n  }\n\n  menuButton:hover {\n    color: lightgrey;\n  }\n  menu {\n    padding: 0.1%;\n    background-color: lightgrey;\n  }\n  menu li {\n    display: inline;\n    display: inline-block;\n    padding: 10px;\n    background-color: lightgrey;\n  }\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n  section {\n    background-color: lightgray;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n\n  p {\n    font-size: x-small;\n  }\n\n  mainBody {\n    width: 100%;\n    height: 100%;\n    background-color: lightgray;\n  }\n\n  menuButton {\n    color: lightslategrey;\n  }\n</style>\n\n{#if login_visi && !sign_up}\n  <section>\n    <main>\n      <h1><img src=\"/img/MyOPC_200x200.png\" alt=\"MyOPC\" /></h1>\n\n      <form on:submit|preventDefault={login(username, password)}>\n        <label> Username <input required bind:value={username} /> </label>\n        <label>\n          Password\n          <input type=\"password\" required bind:value={password} />\n        </label>\n        <div class=\"buttons\">\n          <button>Login</button>\n          <button type=\"button\" on:click={signup}>Sign Up</button>\n        </div>\n        <p>\n          Powered by\n          <img\n            src=\"/img/small_BA_logo_75x75_Cropped.png\"\n            alt=\"BRIDGES AUTOMATION\" />\n        </p>\n      </form>\n    </main>\n\n    <p />\n  </section>\n{:else if sign_up}\n  <section>\n    <main>\n      <h1><img src=\"/img/MyOPC_200x200.png\" alt=\"MyOPC\" /></h1>\n\n      <form\n        on:submit|preventDefault={register(reg_username, reg_email, reg_passwrd, reg_passwrd_confirm)}>\n        <label> Username <input required bind:value={reg_username} /> </label>\n        <label> Email <input required bind:value={reg_email} /> </label>\n        <label> Company <input required bind:value={reg_company} /> </label>\n        <label>\n          Password\n          <input type=\"password\" required bind:value={reg_passwrd} />\n        </label>\n        <label>\n          Confirm\n          <input type=\"password\" required bind:value={reg_passwrd_confirm} />\n        </label>\n        <div class=\"buttons\"><button>Login</button>\n        <button type=\"button\" on:click={signup}>Cancel</button>\n      </div>\n        <p>\n          Powered by\n          <img\n            src=\"/img/small_BA_logo_75x75_Cropped.png\"\n            alt=\"BRIDGES AUTOMATION\" />\n        </p>\n      </form>\n    </main>\n  </section>\n{:else}\n  <mainBody>\n    <div class=\"container\">\n      <center>\n        <header class=\"header\">\n          <h1 id=\"tiptop\">\n            <center><img src={get_gravatar(user.email, 200)} /></center>\n            {user.name.toUpperCase()}'s Profile\n          </h1>\n        </header>\n      </center>\n    </div>\n    <center>\n      <menu>\n        <ul>\n          ||\n          <li>\n            <menuButton on:click={goToSettings}>Settings</menuButton>\n          </li>||\n          <li>\n            <menuButton on:click={goToInstruments}>Instruments</menuButton>\n          </li>||\n          <li>\n            <menuButton on:click={goToCollections}>Collections</menuButton>\n          </li>||\n        </ul>\n      </menu>\n    </center>\n\n    {#if settings_page}\n      <settings_page>\n        <center>\n          <p1>Email: {user.email}</p1>\n          <br />\n          <p2>Company: {profile.company || 'Loding....'}</p2>\n          <br />\n          <br />\n          <p1>Need an API key? Click here ==</p1><button\n            type=\"button\"\n            on:click={API_Key_Gen(result.token)}>API Key Generator</button>\n        </center>\n      </settings_page>\n    {/if}\n    {#if instruments_page}\n      <instruments_page>\n        <center>\n          <h3>Instruments</h3>\n          <instrumentsss>\n            {#if result}\n              {#each instrument_display as obj}\n                <li>{obj.time_stamp}---{obj.unit_id}: {obj.sensor_reading}</li>\n                {#each trendData as trend, index}\n                  {#if obj.unit_id === trend[0]}\n                    <Chart data={trend[1]} type=\"line\" />\n                  {/if}\n                {/each}\n              {/each}\n            {/if}\n          </instrumentsss>\n        </center>\n      </instruments_page>\n    {/if}\n    {#if collections_page}\n      <collections_page>\n        <center>\n          <h3>\n            {user.name}'s Hosted Collections\n            <button on:click={addNewCollectionButton}>add</button>\n          </h3>\n          {#if addNewCollectionForm}\n            <form\n              on:submit|preventDefault={collection(collection_name, collection_instruments, collection_users, collection_owner)}>\n              <label>\n                Collection Name\n                <input required bind:value={collection_name} />\n              </label>\n              <label>\n                Collection Instruments\n                <input required bind:value={collection_instruments} />\n              </label>\n              <label>\n                Collection Users\n                <input required bind:value={collection_users} />\n              </label>\n              \n              <div class=\"buttons\"><button>Submit</button></div>\n              <p>\n                Powered by\n                <img\n                  src=\"/img/small_BA_logo_75x75_Cropped.png\"\n                  alt=\"BRIDGES AUTOMATION\" />\n              </p>\n            </form>\n          {/if}\n          <collections>\n            {#if profile.collections}\n              {#each profile.collections as c, j}\n                <ul id=\"dropdown\">\n                  <li>{c.collection_name}</li>\n                  {#if collection_details}\n                    <ul>\n                      <li>Members</li>\n                      {#each c.collection_people as ppl, k}\n                        <ul>\n                          <li>{ppl}</li>\n                        </ul>\n                      {/each}\n                      <li>Instuments</li> \n                      {#each c.collection_instruments as instrument, l}\n                        <!-- svelte-ignore missing-declaration -->\n                        <ul>\n                          <li>{instrument}</li>\n                          <ul>\n                          {#await getCollectionInstrumentCurrentValue(username/*\"aj@bridgesautomation.com\"*/, instrument, c.collection_name)}\n                          <ul>Loading...</ul>\n                          {:then data}\n                          <ul>{JSON.stringify(data)}</ul>\n                          {:catch error}\n                          <p style=\"color: red\">{error.message}</p>\n                          {/await}\n                        </ul>\n                        </ul>\n                      {/each}\n                    </ul>\n                  {/if}\n                </ul>\n              {/each}\n            {/if}\n          </collections>\n        </center>\n      </collections_page>\n    {/if}\n    <section><br /> <br /></section>\n  </mainBody>\n{/if}\n"
  ],
  "names": [],
  "mappings": "AASE,GAAG,4BAAC,CAAC,AACH,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,8BAAE,MAAM,AAAC,CAAC,AACR,gBAAgB,CAAE,IAAI,AACxB,CAAC,AACD,iBAAG,CAAC,EAAE,cAAC,CAAC,AACN,OAAO,CAAE,MAAM,CACf,OAAO,CAAE,YAAY,CACrB,OAAO,CAAE,IAAI,AACf,CAAC;AC0qBD,SAAS,8BAAC,CAAC,AACT,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,OAAO,CACf,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACpC,eAAe,CAAE,IAAI,CACrB,eAAe,CAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CACnD,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,AAC/C,CAAC,AAED,OAAO,8BAAC,CAAC,AACP,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,KAAK,CACZ,gBAAgB,CAAE,IAAI,CACtB,OAAO,CAAE,EAAE,CACX,aAAa,CAAE,MAAM,AACvB,CAAC,AACD,gCAAE,MAAM,AAAC,CAAC,AACR,gBAAgB,CAAE,cAAc,AAClC,CAAC,AAED,wCAAU,MAAM,AAAC,CAAC,AAChB,KAAK,CAAE,SAAS,AAClB,CAAC,AACD,IAAI,8BAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,gBAAgB,CAAE,SAAS,AAC7B,CAAC,AACD,mBAAI,CAAC,EAAE,eAAC,CAAC,AACP,OAAO,CAAE,MAAM,CACf,OAAO,CAAE,YAAY,CACrB,OAAO,CAAE,IAAI,CACb,gBAAgB,CAAE,SAAS,AAC7B,CAAC,AACD,IAAI,8BAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AACD,OAAO,8BAAC,CAAC,AACP,gBAAgB,CAAE,SAAS,AAC7B,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,8BAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC,AAED,CAAC,8BAAC,CAAC,AACD,SAAS,CAAE,OAAO,AACpB,CAAC,AAED,QAAQ,8BAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,SAAS,AAC7B,CAAC,AAED,UAAU,8BAAC,CAAC,AACV,KAAK,CAAE,cAAc,AACvB,CAAC"
}